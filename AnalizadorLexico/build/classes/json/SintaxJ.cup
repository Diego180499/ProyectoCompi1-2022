package json;
import java_cup.runtime.*;
import codigo.*;
import java.util.ArrayList;

//1. user code

parser code 

{://código que modifica el comportamiento del parser [sobreescribiendo o creado métodos]
    
    private ArrayList<Clase> clases = new ArrayList<>();
    private ArrayList<Variable> variables = new ArrayList<>();
    private ArrayList<Funcion> funciones = new ArrayList<>();
    

    public void crearClase(String nombre){
        Clase clase = new Clase(nombre);
        this.clases.add(clase);
    }

    public void crearVariable(String tipo, String nombre){
        Variable variable = new Variable(tipo,nombre);
        this.variables.add(variable);
    }

    public void crearMetodo(String tipo, String nombre, String parametros){
        Funcion funcion = new Funcion(tipo, nombre);
        funcion.setCantidad_parametros(parametros);
        this.funciones.add(funcion);
    }
  
    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }
    protected int error_sync_size(){
        return 1;
    }

    public ArrayList<Clase> getClases(){
        return this.clases;
    }

    public ArrayList<Variable> getVariables(){
        return this.variables;
    }

    public ArrayList<Funcion> getFunciones(){
        return this.funciones;
    }
   
    

//
:}//


terminal CLASES;
terminal SCORE;
terminal VARIABLES;
terminal METODOS;
terminal COMENTARIOS;
terminal NOMBRE;
terminal TIPO;
terminal FUNCION;
terminal PARAMETROS;
terminal TEXTO;
terminal String IDENTIFICADOR;
terminal COLON;
terminal String COMA;
terminal OPENBRACE;
terminal CLOSEBRACE;
terminal OPENBRACKET;
terminal CLOSEBRACKET;
terminal String CADENA;
terminal String NUMERO;
terminal String DECIMAL;
terminal COMILLA;


non terminal score;
non terminal clases;
non terminal classBody;
non terminal className;
non terminal variables;
non terminal varBody;
non terminal singleVar;
non terminal metodos;
non terminal metodosBody;
non terminal singleMetodo;
non terminal comentarios;
non terminal comentarioBody;
non terminal singleComment;
non terminal inicio;
non terminal cuerpo;
non terminal cadena;
non terminal String cadenaBody;


start with inicio;

inicio ::= OPENBRACE cuerpo CLOSEBRACE;

cuerpo::= score COMA cuerpo
    |clases COMA cuerpo
    |variables COMA cuerpo
    |metodos COMA cuerpo
    |comentarios COMA cuerpo
    |clases
    |variables
    |metodos
    |comentarios
    |
    ;

//PRODUCCION DEL SCORE
score::= SCORE COLON DECIMAL:n {:System.out.println("El score es: "+n);:}
|SCORE COLON NUMERO:n {:System.out.println("El score es: "+n);:}
;

cadena::= COMILLA cadenaBody COMILLA
;

cadenaBody::= CADENA:c COMA {:System.out.println("funcion: "+c);:} cadenaBody
    |CADENA:c {:System.out.println("funcion: "+c);:}
;

//PRODUCCION DE LAS CLASES
clases::=  CLASES COLON OPENBRACKET classBody CLOSEBRACKET;

classBody ::= className COMA classBody
    |className
    ;

className ::= OPENBRACE NOMBRE COLON COMILLA CADENA:c COMILLA CLOSEBRACE {: crearClase(c); :};


//PRODUCCION DE LAS VARIABLES
variables ::= VARIABLES COLON OPENBRACKET varBody CLOSEBRACKET;

varBody ::= singleVar COMA varBody
    |singleVar
;

singleVar::=OPENBRACE NOMBRE COLON COMILLA CADENA:n COMILLA COMA TIPO COLON COMILLA CADENA:t COMILLA COMA FUNCION COLON cadena CLOSEBRACE
{: crearVariable(t,n); :}
;

//PRODUCCION DE METODOS
metodos::= METODOS COLON OPENBRACKET metodosBody CLOSEBRACKET;
metodosBody ::= singleMetodo COMA metodosBody
    |singleMetodo
;

singleMetodo ::= OPENBRACE NOMBRE COLON COMILLA CADENA:n COMILLA COMA TIPO COLON COMILLA CADENA:t COMILLA COMA PARAMETROS COLON NUMERO:p CLOSEBRACE
{: crearMetodo(t,n,p); :}
;

comentarios::= COMENTARIOS COLON OPENBRACKET comentarioBody CLOSEBRACKET;
comentarioBody::= singleComment COMA comentarioBody
    |singleComment
;
singleComment::= OPENBRACE TEXTO COLON CADENA CLOSEBRACE;
