//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Sintax() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Sintax(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\213\000\002\002\004\000\002\003\003\000\002\021"
        + "\011\000\002\021\010\000\002\021\007\000\002\021\010"
        + "\000\002\022\003\000\002\022\004\000\002\023\003\000"
        + "\002\023\004\000\002\002\005\000\002\020\003\000\002"
        + "\020\005\000\002\004\003\000\002\024\013\000\002\024"
        + "\016\000\002\024\012\000\002\024\015\000\002\024\012"
        + "\000\002\024\015\000\002\024\011\000\002\024\014\000"
        + "\002\026\003\000\002\026\004\000\002\027\004\000\002"
        + "\027\006\000\002\005\003\000\002\030\006\000\002\030"
        + "\005\000\002\006\003\000\002\032\010\000\002\032\007"
        + "\000\002\007\012\000\002\007\011\000\002\007\010\000"
        + "\002\035\003\000\002\035\004\000\002\036\004\000\002"
        + "\036\006\000\002\010\003\000\002\037\007\000\002\037"
        + "\006\000\002\011\003\000\002\042\011\000\002\042\014"
        + "\000\002\042\013\000\002\042\012\000\002\042\015\000"
        + "\002\042\014\000\002\040\003\000\002\041\003\000\002"
        + "\041\004\000\002\043\006\000\002\043\011\000\002\012"
        + "\003\000\002\044\013\000\002\045\007\000\002\046\003"
        + "\000\002\047\006\000\002\050\005\000\002\051\003\000"
        + "\002\051\004\000\002\013\003\000\002\052\010\000\002"
        + "\053\004\000\002\054\003\000\002\054\004\000\002\014"
        + "\003\000\002\055\007\000\002\056\007\000\002\061\003"
        + "\000\002\057\003\000\002\057\004\000\002\015\003\000"
        + "\002\060\010\000\002\062\004\000\002\063\003\000\002"
        + "\063\004\000\002\064\010\000\002\064\010\000\002\065"
        + "\003\000\002\065\004\000\002\016\003\000\002\066\003"
        + "\000\002\066\003\000\002\066\003\000\002\066\003\000"
        + "\002\066\003\000\002\066\003\000\002\066\003\000\002"
        + "\066\003\000\002\066\003\000\002\066\003\000\002\017"
        + "\003\000\002\067\006\000\002\067\006\000\002\067\006"
        + "\000\002\067\006\000\002\067\006\000\002\067\006\000"
        + "\002\067\006\000\002\067\006\000\002\067\006\000\002"
        + "\067\006\000\002\067\006\000\002\067\006\000\002\067"
        + "\005\000\002\067\005\000\002\067\005\000\002\067\005"
        + "\000\002\067\005\000\002\067\005\000\002\072\003\000"
        + "\002\070\004\000\002\070\006\000\002\070\003\000\002"
        + "\070\004\000\002\070\003\000\002\070\005\000\002\071"
        + "\004\000\002\071\004\000\002\071\004\000\002\071\004"
        + "\000\002\025\003\000\002\025\003\000\002\025\003\000"
        + "\002\025\003\000\002\025\003\000\002\025\003\000\002"
        + "\025\003\000\002\073\003\000\002\073\003\000\002\073"
        + "\003\000\002\073\003\000\002\031\003\000\002\031\005"
        + "\000\002\074\003\000\002\074\003\000\002\074\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\u0129\000\014\026\013\031\004\032\011\033\007\034"
        + "\012\001\002\000\022\027\uff7f\030\uff7f\035\uff7f\036\uff7f"
        + "\037\uff7f\040\uff7f\041\uff7f\055\uff7f\001\002\000\004\027"
        + "\u0126\001\002\000\012\031\004\032\011\033\007\034\012"
        + "\001\002\000\022\027\uff7d\030\uff7d\035\uff7d\036\uff7d\037"
        + "\uff7d\040\uff7d\041\uff7d\055\uff7d\001\002\000\010\002\000"
        + "\006\000\012\000\001\002\000\022\027\uff7e\030\uff7e\035"
        + "\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\055\uff7e\001\002"
        + "\000\022\027\uff7c\030\uff7c\035\uff7c\036\uff7c\037\uff7c\040"
        + "\uff7c\041\uff7c\055\uff7c\001\002\000\004\055\020\001\002"
        + "\000\004\002\017\001\002\000\014\026\013\031\ufff9\032"
        + "\ufff9\033\ufff9\034\ufff9\001\002\000\012\031\ufff8\032\ufff8"
        + "\033\ufff8\034\ufff8\001\002\000\004\002\001\001\002\000"
        + "\006\012\ufff6\056\023\001\002\000\004\012\022\001\002"
        + "\000\014\026\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\001"
        + "\002\000\004\055\020\001\002\000\004\012\ufff5\001\002"
        + "\000\004\027\026\001\002\000\004\055\027\001\002\000"
        + "\004\007\030\001\002\000\044\010\035\030\064\031\004"
        + "\032\011\033\007\034\012\035\041\036\070\037\061\040"
        + "\033\041\036\042\060\044\065\047\043\050\066\051\075"
        + "\055\047\001\002\000\004\055\307\001\002\000\050\010"
        + "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3"
        + "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\044\uffc3\046"
        + "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\055\uffc3\001\002"
        + "\000\004\055\uff82\001\002\000\020\030\064\035\041\036"
        + "\070\037\061\040\033\041\036\055\345\001\002\000\010"
        + "\002\ufffe\006\ufffe\012\ufffe\001\002\000\004\055\uff81\001"
        + "\002\000\050\010\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4"
        + "\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042"
        + "\ufff4\044\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4"
        + "\055\ufff4\001\002\000\050\010\uffaf\030\uffaf\031\uffaf\032"
        + "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf"
        + "\041\uffaf\042\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\051"
        + "\uffaf\052\uffaf\055\uffaf\001\002\000\004\055\uff85\001\002"
        + "\000\050\010\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034"
        + "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4"
        + "\044\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\055"
        + "\uffe4\001\002\000\004\005\316\001\002\000\050\010\uffda"
        + "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036"
        + "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\044\uffda\046\uffda"
        + "\047\uffda\050\uffda\051\uffda\052\uffda\055\uffda\001\002\000"
        + "\050\010\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7"
        + "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\044"
        + "\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\055\uffe7"
        + "\001\002\000\050\010\uffbe\030\uffbe\031\uffbe\032\uffbe\033"
        + "\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe"
        + "\042\uffbe\044\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052"
        + "\uffbe\055\uffbe\001\002\000\006\005\305\055\uff80\001\002"
        + "\000\050\010\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034"
        + "\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8"
        + "\044\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\055"
        + "\uffa8\001\002\000\050\010\uffa9\030\uffa9\031\uffa9\032\uffa9"
        + "\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041"
        + "\uffa9\042\uffa9\044\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9"
        + "\052\uffa9\055\uffa9\001\002\000\050\010\uffaa\030\uffaa\031"
        + "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa"
        + "\040\uffaa\041\uffaa\042\uffaa\044\uffaa\046\uffaa\047\uffaa\050"
        + "\uffaa\051\uffaa\052\uffaa\055\uffaa\001\002\000\050\010\uffab"
        + "\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036"
        + "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\044\uffab\046\uffab"
        + "\047\uffab\050\uffab\051\uffab\052\uffab\055\uffab\001\002\000"
        + "\050\010\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac"
        + "\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\044"
        + "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\055\uffac"
        + "\001\002\000\050\010\uffad\030\uffad\031\uffad\032\uffad\033"
        + "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad"
        + "\042\uffad\044\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052"
        + "\uffad\055\uffad\001\002\000\050\010\uffae\030\uffae\031\uffae"
        + "\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040"
        + "\uffae\041\uffae\042\uffae\044\uffae\046\uffae\047\uffae\050\uffae"
        + "\051\uffae\052\uffae\055\uffae\001\002\000\050\010\uffb8\030"
        + "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8"
        + "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\044\uffb8\046\uffb8\047"
        + "\uffb8\050\uffb8\051\uffb8\052\uffb8\055\uffb8\001\002\000\004"
        + "\005\225\001\002\000\004\055\uff83\001\002\000\050\010"
        + "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb"
        + "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\044\uffcb\046"
        + "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\055\uffcb\001\002"
        + "\000\050\010\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034"
        + "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7"
        + "\044\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\055"
        + "\uffd7\001\002\000\004\055\uff86\001\002\000\004\005\177"
        + "\001\002\000\004\005\166\001\002\000\044\010\ufffb\030"
        + "\064\031\004\032\011\033\007\034\012\035\041\036\070"
        + "\037\061\040\033\041\036\042\060\044\065\047\043\050"
        + "\066\051\075\055\047\001\002\000\004\055\uff84\001\002"
        + "\000\050\010\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034"
        + "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5"
        + "\044\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\055"
        + "\uffa5\001\002\000\050\010\uffa6\030\uffa6\031\uffa6\032\uffa6"
        + "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041"
        + "\uffa6\042\uffa6\044\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6"
        + "\052\uffa6\055\uffa6\001\002\000\050\010\uffa7\030\uffa7\031"
        + "\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7"
        + "\040\uffa7\041\uffa7\042\uffa7\044\uffa7\046\uffa7\047\uffa7\050"
        + "\uffa7\051\uffa7\052\uffa7\055\uffa7\001\002\000\004\010\164"
        + "\001\002\000\004\007\076\001\002\000\042\030\064\031"
        + "\004\032\011\033\007\034\012\035\041\036\070\037\061"
        + "\040\033\041\036\042\060\044\065\047\043\050\066\051"
        + "\075\055\047\001\002\000\004\010\102\001\002\000\044"
        + "\010\uffba\030\064\031\004\032\011\033\007\034\012\035"
        + "\041\036\070\037\061\040\033\041\036\042\060\044\065"
        + "\047\043\050\066\051\075\055\047\001\002\000\004\010"
        + "\uffb9\001\002\000\004\050\104\001\002\000\050\010\uffbd"
        + "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036"
        + "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\044\uffbd\046\uffbd"
        + "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\055\uffbd\001\002\000"
        + "\004\005\105\001\002\000\010\053\107\054\113\055\110"
        + "\001\002\000\004\006\162\001\002\000\012\016\150\023"
        + "\152\024\153\025\151\001\002\000\012\016\126\023\130"
        + "\024\131\025\127\001\002\000\004\006\uffbb\001\002\000"
        + "\004\006\uffa4\001\002\000\012\016\114\023\116\024\117"
        + "\025\115\001\002\000\004\016\124\001\002\000\004\016"
        + "\122\001\002\000\004\054\121\001\002\000\004\054\120"
        + "\001\002\000\004\006\uff92\001\002\000\004\006\uff93\001"
        + "\002\000\004\054\123\001\002\000\004\006\uff9c\001\002"
        + "\000\004\054\125\001\002\000\004\006\uff9e\001\002\000"
        + "\004\016\144\001\002\000\004\016\140\001\002\000\006"
        + "\016\136\053\135\001\002\000\006\016\133\053\132\001"
        + "\002\000\004\006\uff97\001\002\000\004\053\134\001\002"
        + "\000\004\006\uff9a\001\002\000\004\006\uff96\001\002\000"
        + "\004\053\137\001\002\000\004\006\uff9b\001\002\000\010"
        + "\004\143\053\141\055\142\001\002\000\004\006\uff98\001"
        + "\002\000\004\006\uffa1\001\002\000\004\006\uffa0\001\002"
        + "\000\010\004\147\053\145\055\146\001\002\000\004\006"
        + "\uff99\001\002\000\004\006\uffa3\001\002\000\004\006\uffa2"
        + "\001\002\000\004\016\160\001\002\000\004\016\156\001"
        + "\002\000\004\053\155\001\002\000\004\053\154\001\002"
        + "\000\004\006\uff95\001\002\000\004\006\uff94\001\002\000"
        + "\004\053\157\001\002\000\004\006\uff9d\001\002\000\004"
        + "\053\161\001\002\000\004\006\uff9f\001\002\000\004\012"
        + "\163\001\002\000\050\010\uffbc\030\uffbc\031\uffbc\032\uffbc"
        + "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041"
        + "\uffbc\042\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc"
        + "\052\uffbc\055\uffbc\001\002\000\010\002\uffff\006\uffff\012"
        + "\uffff\001\002\000\004\010\ufffa\001\002\000\010\053\107"
        + "\054\113\055\110\001\002\000\004\007\172\001\002\000"
        + "\004\006\171\001\002\000\004\007\uffc1\001\002\000\042"
        + "\030\064\031\004\032\011\033\007\034\012\035\041\036"
        + "\070\037\061\040\033\041\036\042\060\044\065\047\043"
        + "\050\066\051\075\055\047\001\002\000\004\010\176\001"
        + "\002\000\044\010\uffc0\030\064\031\004\032\011\033\007"
        + "\034\012\035\041\036\070\037\061\040\033\041\036\042"
        + "\060\044\065\047\043\050\066\051\075\055\047\001\002"
        + "\000\004\010\uffbf\001\002\000\050\010\uffc2\030\uffc2\031"
        + "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2"
        + "\040\uffc2\041\uffc2\042\uffc2\044\uffc2\046\uffc2\047\uffc2\050"
        + "\uffc2\051\uffc2\052\uffc2\055\uffc2\001\002\000\004\055\200"
        + "\001\002\000\004\006\224\001\002\000\004\007\202\001"
        + "\002\000\004\045\205\001\002\000\004\010\223\001\002"
        + "\000\006\010\uffb5\045\205\001\002\000\006\004\207\053"
        + "\206\001\002\000\004\011\216\001\002\000\004\011\210"
        + "\001\002\000\042\030\064\031\004\032\011\033\007\034"
        + "\012\035\041\036\070\037\061\040\033\041\036\042\060"
        + "\044\065\047\043\050\066\051\075\055\047\001\002\000"
        + "\004\046\214\001\002\000\044\030\064\031\004\032\011"
        + "\033\007\034\012\035\041\036\070\037\061\040\033\041"
        + "\036\042\060\044\065\046\uffb1\047\043\050\066\051\075"
        + "\055\047\001\002\000\004\046\uffb0\001\002\000\004\012"
        + "\215\001\002\000\006\010\uffb2\045\uffb2\001\002\000\042"
        + "\030\064\031\004\032\011\033\007\034\012\035\041\036"
        + "\070\037\061\040\033\041\036\042\060\044\065\047\043"
        + "\050\066\051\075\055\047\001\002\000\004\046\220\001"
        + "\002\000\004\012\221\001\002\000\006\010\uffb3\045\uffb3"
        + "\001\002\000\004\010\uffb4\001\002\000\050\010\uffb7\030"
        + "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7"
        + "\037\uffb7\040\uffb7\041\uffb7\042\uffb7\044\uffb7\046\uffb7\047"
        + "\uffb7\050\uffb7\051\uffb7\052\uffb7\055\uffb7\001\002\000\004"
        + "\007\uffb6\001\002\000\010\053\107\054\113\055\110\001"
        + "\002\000\004\006\230\001\002\000\004\006\uffd0\001\002"
        + "\000\004\007\231\001\002\000\044\030\064\031\004\032"
        + "\011\033\007\034\012\035\041\036\070\037\061\040\033"
        + "\041\036\042\060\044\065\047\043\050\066\051\075\052"
        + "\232\055\047\001\002\000\014\004\246\005\242\053\237"
        + "\054\245\055\240\001\002\000\046\010\uffcf\030\064\031"
        + "\004\032\011\033\007\034\012\035\041\036\070\037\061"
        + "\040\033\041\036\042\060\044\065\047\043\050\066\051"
        + "\075\052\uffcf\055\047\001\002\000\006\010\235\052\236"
        + "\001\002\000\052\010\uffd6\030\uffd6\031\uffd6\032\uffd6\033"
        + "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6"
        + "\042\uffd6\043\253\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051"
        + "\uffd6\052\uffd6\055\uffd6\001\002\000\014\004\246\005\242"
        + "\053\237\054\245\055\240\001\002\000\016\006\uff8e\012"
        + "\uff8e\017\267\020\272\021\270\022\266\001\002\000\004"
        + "\012\uff79\001\002\000\004\012\uff78\001\002\000\010\005"
        + "\242\053\237\054\245\001\002\000\004\012\250\001\002"
        + "\000\004\012\uff91\001\002\000\020\006\uff8c\012\uff8c\026"
        + "\013\031\004\032\011\033\007\034\012\001\002\000\004"
        + "\012\uff77\001\002\000\006\006\uff8d\012\uff8d\001\002\000"
        + "\004\010\251\001\002\000\052\010\uffd5\030\uffd5\031\uffd5"
        + "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040"
        + "\uffd5\041\uffd5\042\uffd5\043\253\044\uffd5\046\uffd5\047\uffd5"
        + "\050\uffd5\051\uffd5\052\uffd5\055\uffd5\001\002\000\050\010"
        + "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2"
        + "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\046"
        + "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\055\uffd2\001\002"
        + "\000\004\007\254\001\002\000\042\030\064\031\004\032"
        + "\011\033\007\034\012\035\041\036\070\037\061\040\033"
        + "\041\036\042\060\044\065\047\043\050\066\051\075\055"
        + "\047\001\002\000\006\010\256\052\257\001\002\000\050"
        + "\010\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035"
        + "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd"
        + "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\055\uffcd\001"
        + "\002\000\014\004\246\005\242\053\237\054\245\055\240"
        + "\001\002\000\004\012\261\001\002\000\004\010\262\001"
        + "\002\000\050\010\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc"
        + "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042"
        + "\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc"
        + "\055\uffcc\001\002\000\004\006\264\001\002\000\020\006"
        + "\uff8b\012\uff8b\026\013\031\004\032\011\033\007\034\012"
        + "\001\002\000\006\006\uff8f\012\uff8f\001\002\000\010\005"
        + "\242\053\237\054\245\001\002\000\010\005\242\053\237"
        + "\054\245\001\002\000\010\005\242\053\237\054\245\001"
        + "\002\000\006\006\uff90\012\uff90\001\002\000\010\005\242"
        + "\053\237\054\245\001\002\000\006\006\uff89\012\uff89\001"
        + "\002\000\006\006\uff88\012\uff88\001\002\000\006\006\uff8a"
        + "\012\uff8a\001\002\000\006\006\uff87\012\uff87\001\002\000"
        + "\050\010\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3"
        + "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\044"
        + "\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\055\uffd3"
        + "\001\002\000\006\010\uffce\052\uffce\001\002\000\004\012"
        + "\302\001\002\000\004\010\303\001\002\000\052\010\uffd4"
        + "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036"
        + "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\253\044\uffd4"
        + "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\055\uffd4\001"
        + "\002\000\050\010\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1"
        + "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042"
        + "\uffd1\044\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1"
        + "\055\uffd1\001\002\000\006\006\306\055\307\001\002\000"
        + "\004\012\315\001\002\000\012\006\uff7b\012\uff7b\013\313"
        + "\016\uff7b\001\002\000\004\006\311\001\002\000\004\012"
        + "\312\001\002\000\050\010\uffd9\030\uffd9\031\uffd9\032\uffd9"
        + "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041"
        + "\uffd9\042\uffd9\044\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9"
        + "\052\uffd9\055\uffd9\001\002\000\004\055\307\001\002\000"
        + "\010\006\uff7a\012\uff7a\016\uff7a\001\002\000\050\010\uffd8"
        + "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036"
        + "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8\046\uffd8"
        + "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\055\uffd8\001\002\000"
        + "\004\035\320\001\002\000\004\055\326\001\002\000\004"
        + "\055\321\001\002\000\004\016\322\001\002\000\010\005"
        + "\242\053\237\054\245\001\002\000\004\012\325\001\002"
        + "\000\004\012\uffc8\001\002\000\004\055\uffc9\001\002\000"
        + "\004\023\342\001\002\000\004\055\331\001\002\000\004"
        + "\006\334\001\002\000\004\017\332\001\002\000\004\017"
        + "\333\001\002\000\004\006\uffc6\001\002\000\004\007\335"
        + "\001\002\000\042\030\064\031\004\032\011\033\007\034"
        + "\012\035\041\036\070\037\061\040\033\041\036\042\060"
        + "\044\065\047\043\050\066\051\075\055\047\001\002\000"
        + "\004\010\341\001\002\000\044\010\uffc5\030\064\031\004"
        + "\032\011\033\007\034\012\035\041\036\070\037\061\040"
        + "\033\041\036\042\060\044\065\047\043\050\066\051\075"
        + "\055\047\001\002\000\004\010\uffc4\001\002\000\050\010"
        + "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca"
        + "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\044\uffca\046"
        + "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\055\uffca\001\002"
        + "\000\010\005\242\053\237\054\245\001\002\000\004\012"
        + "\344\001\002\000\004\055\uffc7\001\002\000\006\005\u0110"
        + "\055\uff80\001\002\000\004\055\347\001\002\000\012\005"
        + "\355\012\uff7b\013\313\016\uff7b\001\002\000\006\012\352"
        + "\016\351\001\002\000\014\004\246\005\242\053\237\054"
        + "\245\055\240\001\002\000\050\010\uffe6\030\uffe6\031\uffe6"
        + "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040"
        + "\uffe6\041\uffe6\042\uffe6\044\uffe6\046\uffe6\047\uffe6\050\uffe6"
        + "\051\uffe6\052\uffe6\055\uffe6\001\002\000\004\012\354\001"
        + "\002\000\050\010\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3"
        + "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042"
        + "\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3"
        + "\055\uffe3\001\002\000\022\006\357\030\064\035\041\036"
        + "\070\037\061\040\033\041\036\055\361\001\002\000\004"
        + "\055\u010d\001\002\000\004\007\u0101\001\002\000\004\006"
        + "\362\001\002\000\004\055\uff80\001\002\000\004\007\363"
        + "\001\002\000\046\010\364\030\064\031\004\032\011\033"
        + "\007\034\012\035\041\036\070\037\061\040\033\041\036"
        + "\042\060\044\065\047\043\050\066\051\075\052\365\055"
        + "\047\001\002\000\050\010\uffef\030\uffef\031\uffef\032\uffef"
        + "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041"
        + "\uffef\042\uffef\044\uffef\046\uffef\047\uffef\050\uffef\051\uffef"
        + "\052\uffef\055\uffef\001\002\000\014\004\246\005\242\053"
        + "\237\054\245\055\240\001\002\000\046\010\uffeb\030\064"
        + "\031\004\032\011\033\007\034\012\035\041\036\070\037"
        + "\061\040\033\041\036\042\060\044\065\047\043\050\066"
        + "\051\075\052\uffeb\055\047\001\002\000\006\010\370\052"
        + "\371\001\002\000\050\010\ufff3\030\ufff3\031\ufff3\032\ufff3"
        + "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041"
        + "\ufff3\042\ufff3\044\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3"
        + "\052\ufff3\055\ufff3\001\002\000\014\004\246\005\242\053"
        + "\237\054\245\055\240\001\002\000\004\012\373\001\002"
        + "\000\004\010\374\001\002\000\050\010\ufff2\030\ufff2\031"
        + "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2"
        + "\040\ufff2\041\ufff2\042\ufff2\044\ufff2\046\ufff2\047\ufff2\050"
        + "\ufff2\051\ufff2\052\ufff2\055\ufff2\001\002\000\006\010\uffea"
        + "\052\uffea\001\002\000\004\012\377\001\002\000\004\010"
        + "\u0100\001\002\000\050\010\uffee\030\uffee\031\uffee\032\uffee"
        + "\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041"
        + "\uffee\042\uffee\044\uffee\046\uffee\047\uffee\050\uffee\051\uffee"
        + "\052\uffee\055\uffee\001\002\000\046\010\u0102\030\064\031"
        + "\004\032\011\033\007\034\012\035\041\036\070\037\061"
        + "\040\033\041\036\042\060\044\065\047\043\050\066\051"
        + "\075\052\u0103\055\047\001\002\000\050\010\uffed\030\uffed"
        + "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037"
        + "\uffed\040\uffed\041\uffed\042\uffed\044\uffed\046\uffed\047\uffed"
        + "\050\uffed\051\uffed\052\uffed\055\uffed\001\002\000\014\004"
        + "\246\005\242\053\237\054\245\055\240\001\002\000\006"
        + "\010\u0105\052\u0106\001\002\000\050\010\ufff1\030\ufff1\031"
        + "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1"
        + "\040\ufff1\041\ufff1\042\ufff1\044\ufff1\046\ufff1\047\ufff1\050"
        + "\ufff1\051\ufff1\052\ufff1\055\ufff1\001\002\000\014\004\246"
        + "\005\242\053\237\054\245\055\240\001\002\000\004\012"
        + "\u0108\001\002\000\004\010\u0109\001\002\000\050\010\ufff0"
        + "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036"
        + "\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\044\ufff0\046\ufff0"
        + "\047\ufff0\050\ufff0\051\ufff0\052\ufff0\055\ufff0\001\002\000"
        + "\004\012\u010b\001\002\000\004\010\u010c\001\002\000\050"
        + "\010\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035"
        + "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\044\uffec"
        + "\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\055\uffec\001"
        + "\002\000\006\006\uffe9\013\u010e\001\002\000\020\030\064"
        + "\035\041\036\070\037\061\040\033\041\036\055\361\001"
        + "\002\000\004\006\uffe8\001\002\000\022\006\u0113\030\064"
        + "\035\041\036\070\037\061\040\033\041\036\055\361\001"
        + "\002\000\004\006\u011d\001\002\000\004\055\u011a\001\002"
        + "\000\004\007\u0114\001\002\000\044\010\u0115\030\064\031"
        + "\004\032\011\033\007\034\012\035\041\036\070\037\061"
        + "\040\033\041\036\042\060\044\065\047\043\050\066\051"
        + "\075\055\047\001\002\000\050\010\uffdf\030\uffdf\031\uffdf"
        + "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040"
        + "\uffdf\041\uffdf\042\uffdf\044\uffdf\046\uffdf\047\uffdf\050\uffdf"
        + "\051\uffdf\052\uffdf\055\uffdf\001\002\000\004\010\u0119\001"
        + "\002\000\044\010\uffde\030\064\031\004\032\011\033\007"
        + "\034\012\035\041\036\070\037\061\040\033\041\036\042"
        + "\060\044\065\047\043\050\066\051\075\055\047\001\002"
        + "\000\004\010\uffdd\001\002\000\050\010\uffe0\030\uffe0\031"
        + "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0"
        + "\040\uffe0\041\uffe0\042\uffe0\044\uffe0\046\uffe0\047\uffe0\050"
        + "\uffe0\051\uffe0\052\uffe0\055\uffe0\001\002\000\006\006\uffdc"
        + "\013\u011b\001\002\000\020\030\064\035\041\036\070\037"
        + "\061\040\033\041\036\055\361\001\002\000\004\006\uffdb"
        + "\001\002\000\004\007\u011e\001\002\000\042\030\064\031"
        + "\004\032\011\033\007\034\012\035\041\036\070\037\061"
        + "\040\033\041\036\042\060\044\065\047\043\050\066\051"
        + "\075\055\047\001\002\000\004\010\u0120\001\002\000\050"
        + "\010\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035"
        + "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1"
        + "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\055\uffe1\001"
        + "\002\000\006\012\u0123\016\u0122\001\002\000\014\004\246"
        + "\005\242\053\237\054\245\055\240\001\002\000\050\010"
        + "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5"
        + "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\046"
        + "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\055\uffe5\001\002"
        + "\000\004\012\u0125\001\002\000\050\010\uffe2\030\uffe2\031"
        + "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2"
        + "\040\uffe2\041\uffe2\042\uffe2\044\uffe2\046\uffe2\047\uffe2\050"
        + "\uffe2\051\uffe2\052\uffe2\055\uffe2\001\002\000\004\055\u0127"
        + "\001\002\000\004\007\u0128\001\002\000\044\010\u0129\030"
        + "\064\031\004\032\011\033\007\034\012\035\041\036\070"
        + "\037\061\040\033\041\036\042\060\044\065\047\043\050"
        + "\066\051\075\055\047\001\002\000\010\002\ufffd\006\ufffd"
        + "\012\ufffd\001\002\000\004\010\u012b\001\002\000\010\002"
        + "\ufffc\006\ufffc\012\ufffc\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\u0129\000\014\002\014\003\013\021\007\023\005\073"
        + "\004\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\073\024\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\020\020\001\001"
        + "\000\002\001\001\000\006\002\014\023\015\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\020\023\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\062\004\055\005\054\006\053\007\052\010"
        + "\051\011\050\012\047\013\072\014\071\015\070\016\066"
        + "\022\073\024\036\025\030\030\044\032\041\037\043\042"
        + "\062\044\061\052\031\055\045\060\056\066\037\073\033"
        + "\001\001\000\004\031\u0120\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\025\345\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\062\004\055"
        + "\005\054\006\053\007\052\010\051\011\050\012\047\013"
        + "\072\014\071\015\070\016\066\022\164\024\036\025\030"
        + "\030\044\032\041\037\043\042\062\044\061\052\031\055"
        + "\045\060\056\066\037\073\033\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\062\004\055\005\054"
        + "\006\053\007\052\010\051\011\050\012\047\013\072\014"
        + "\071\015\070\016\077\024\036\025\030\030\044\032\041"
        + "\037\043\042\062\044\061\052\031\055\045\057\076\060"
        + "\056\066\037\073\033\001\001\000\002\001\001\000\062"
        + "\004\055\005\054\006\053\007\052\010\051\011\050\012"
        + "\047\013\072\014\071\015\070\016\077\024\036\025\030"
        + "\030\044\032\041\037\043\042\062\044\061\052\031\055"
        + "\045\057\100\060\056\066\037\073\033\001\001\000\002"
        + "\001\001\000\004\056\102\001\001\000\002\001\001\000"
        + "\002\001\001\000\010\017\110\061\105\067\111\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\010\017"
        + "\167\053\166\067\111\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\062\004\055\005\054\006"
        + "\053\007\052\010\051\011\050\012\047\013\072\014\071"
        + "\015\070\016\173\024\036\025\030\030\044\032\041\037"
        + "\043\042\062\044\061\052\031\054\172\055\045\060\056"
        + "\066\037\073\033\001\001\000\002\001\001\000\062\004"
        + "\055\005\054\006\053\007\052\010\051\011\050\012\047"
        + "\013\072\014\071\015\070\016\173\024\036\025\030\030"
        + "\044\032\041\037\043\042\062\044\061\052\031\054\174"
        + "\055\045\060\056\066\037\073\033\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\062\200\001\001\000\002"
        + "\001\001\000\002\001\001\000\006\063\202\064\203\001"
        + "\001\000\002\001\001\000\006\063\221\064\203\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\062\004\055\005\054\006\053\007\052\010\051\011\050"
        + "\012\047\013\072\014\071\015\070\016\211\024\036\025"
        + "\030\030\044\032\041\037\043\042\062\044\061\052\031"
        + "\055\045\060\056\065\210\066\037\073\033\001\001\000"
        + "\002\001\001\000\062\004\055\005\054\006\053\007\052"
        + "\010\051\011\050\012\047\013\072\014\071\015\070\016"
        + "\211\024\036\025\030\030\044\032\041\037\043\042\062"
        + "\044\061\052\031\055\045\060\056\065\212\066\037\073"
        + "\033\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\062\004\055\005\054\006\053\007\052\010"
        + "\051\011\050\012\047\013\072\014\071\015\070\016\211"
        + "\024\036\025\030\030\044\032\041\037\043\042\062\044"
        + "\061\052\031\055\045\060\056\065\216\066\037\073\033"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\010\017\226\040\225\067\111\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\062\004\055"
        + "\005\054\006\053\007\052\010\051\011\050\012\047\013"
        + "\072\014\071\015\070\016\232\024\036\025\030\030\044"
        + "\032\041\037\043\041\233\042\062\044\061\052\031\055"
        + "\045\060\056\066\037\073\033\001\001\000\010\070\243"
        + "\072\240\074\300\001\001\000\062\004\055\005\054\006"
        + "\053\007\052\010\051\011\050\012\047\013\072\014\071"
        + "\015\070\016\232\024\036\025\030\030\044\032\041\037"
        + "\043\041\277\042\062\044\061\052\031\055\045\060\056"
        + "\066\037\073\033\001\001\000\002\001\001\000\004\043"
        + "\276\001\001\000\010\070\243\072\240\074\242\001\001"
        + "\000\004\071\270\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\070\262\001\001\000\002\001\001\000\002"
        + "\001\001\000\014\002\014\003\246\021\007\023\005\073"
        + "\004\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\043\251\001\001\000\002\001\001\000"
        + "\002\001\001\000\062\004\055\005\054\006\053\007\052"
        + "\010\051\011\050\012\047\013\072\014\071\015\070\016"
        + "\232\024\036\025\030\030\044\032\041\037\043\041\254"
        + "\042\062\044\061\052\031\055\045\060\056\066\037\073"
        + "\033\001\001\000\002\001\001\000\002\001\001\000\010"
        + "\070\243\072\240\074\257\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\014"
        + "\002\014\003\264\021\007\023\005\073\004\001\001\000"
        + "\002\001\001\000\004\070\275\001\001\000\004\070\274"
        + "\001\001\000\004\070\273\001\001\000\002\001\001\000"
        + "\004\070\272\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\043\303\001\001\000\002\001\001\000\004\031\307\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\031\313\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\045\316"
        + "\001\001\000\004\047\326\001\001\000\002\001\001\000"
        + "\002\001\001\000\010\046\322\070\243\072\323\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\050\327\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\062\004\055\005\054\006\053\007\052"
        + "\010\051\011\050\012\047\013\072\014\071\015\070\016"
        + "\336\024\036\025\030\030\044\032\041\037\043\042\062"
        + "\044\061\051\335\052\031\055\045\060\056\066\037\073"
        + "\033\001\001\000\002\001\001\000\062\004\055\005\054"
        + "\006\053\007\052\010\051\011\050\012\047\013\072\014"
        + "\071\015\070\016\336\024\036\025\030\030\044\032\041"
        + "\037\043\042\062\044\061\051\337\052\031\055\045\060"
        + "\056\066\037\073\033\001\001\000\002\001\001\000\002"
        + "\001\001\000\010\046\342\070\243\072\323\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\031\347\001\001\000\002\001\001\000\002\001\001\000"
        + "\010\070\243\072\240\074\352\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\006\025\355\027"
        + "\357\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\062\004"
        + "\055\005\054\006\053\007\052\010\051\011\050\012\047"
        + "\013\072\014\071\015\070\016\365\024\036\025\030\026"
        + "\366\030\044\032\041\037\043\042\062\044\061\052\031"
        + "\055\045\060\056\066\037\073\033\001\001\000\002\001"
        + "\001\000\010\070\243\072\240\074\375\001\001\000\062"
        + "\004\055\005\054\006\053\007\052\010\051\011\050\012"
        + "\047\013\072\014\071\015\070\016\365\024\036\025\030"
        + "\026\374\030\044\032\041\037\043\042\062\044\061\052"
        + "\031\055\045\060\056\066\037\073\033\001\001\000\002"
        + "\001\001\000\002\001\001\000\010\070\243\072\240\074"
        + "\371\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\062\004\055\005\054\006\053"
        + "\007\052\010\051\011\050\012\047\013\072\014\071\015"
        + "\070\016\365\024\036\025\030\026\u0103\030\044\032\041"
        + "\037\043\042\062\044\061\052\031\055\045\060\056\066"
        + "\037\073\033\001\001\000\002\001\001\000\010\070\243"
        + "\072\240\074\u0109\001\001\000\002\001\001\000\002\001"
        + "\001\000\010\070\243\072\240\074\u0106\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\006\025\355\027\u010e\001\001\000\002\001\001\000"
        + "\006\025\u0111\036\u0110\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\062\004\055\005\054\006"
        + "\053\007\052\010\051\011\050\012\047\013\072\014\071"
        + "\015\070\016\u0116\024\036\025\030\030\044\032\041\035"
        + "\u0115\037\043\042\062\044\061\052\031\055\045\060\056"
        + "\066\037\073\033\001\001\000\002\001\001\000\002\001"
        + "\001\000\062\004\055\005\054\006\053\007\052\010\051"
        + "\011\050\012\047\013\072\014\071\015\070\016\u0116\024"
        + "\036\025\030\030\044\032\041\035\u0117\037\043\042\062"
        + "\044\061\052\031\055\045\060\056\066\037\073\033\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\006\025\u0111\036\u011b\001\001\000\002\001\001\000"
        + "\002\001\001\000\062\004\055\005\054\006\053\007\052"
        + "\010\051\011\050\012\047\013\072\014\071\015\070\016"
        + "\u0116\024\036\025\030\030\044\032\041\035\u011e\037\043"
        + "\042\062\044\061\052\031\055\045\060\056\066\037\073"
        + "\033\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\010\070\243\072\240\074\u0123\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\062\004\055\005\054\006"
        + "\053\007\052\010\051\011\050\012\047\013\072\014\071"
        + "\015\070\016\066\022\u0129\024\036\025\030\030\044\032"
        + "\041\037\043\042\062\044\061\052\031\055\045\060\056"
        + "\066\037\073\033\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Sintax$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Sintax$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    private Symbol s;
    private ArrayList<Clase> clases = new ArrayList<>();
    private ArrayList<Variable> variables = new ArrayList<>();
    private ArrayList<Funcion> funciones = new ArrayList<>();

    public Symbol getS() {
        return this.s;
    }

    public Clase clase;

    public void crearClase(String nombreClase, String variables) {  //variables = public-int-var1,public-String-var2
        Clase clase = new Clase(nombreClase);
        String datosVariables[] = variables.split(",");  //  {public-int-var1, public-String-var2}

        for (int i = 0; i < datosVariables.length; i++) {
            char caracter = datosVariables[i].charAt(0);
            if (!(caracter == '*')) {
                String[] datos = datosVariables[i].split("-"); //{public,int,var1}
                String visibilidad = datos[0];
                String tipo = datos[1];
                String nombre = datos[2];

                Variable variable = new Variable(tipo, nombre, nombreClase, "Variable");
                this.variables.add(variable);
                clase.getVariables().add(variable);
            }

        }
        this.getClases().add(clase);
    }

    public void crearVariable(String tipo, String nombres) {
        String[] nombresVariables = nombres.split(",");

        for (int i = 0; i < nombresVariables.length; i++) {
            Variable variable = new Variable(tipo, nombresVariables[i]);
            this.variables.add(variable);
        }
    }

    public void crearMetodo(String tipoMetodo, String nombreMetodo, String parametros, String variablesMetodo) {

        String[] datosDeParametros = parametros.split(",");
        ArrayList<Variable> param = new ArrayList<>();

        String datos;
        if (!parametros.equals("*")) {

            for (int i = 0; i < datosDeParametros.length; i++) {
                datos = datosDeParametros[i];
                String[] datosParametro = datos.split("-");
                String nombreVariable = datosParametro[0];
                String tipoVariable = datosParametro[1];
                String funcionPadre = nombreMetodo;
                String rol = "Parametro";
                Variable variable = new Variable(tipoVariable, nombreVariable, funcionPadre, rol);
                param.add(variable);
                this.variables.add(variable);
            }
        }

        Funcion funcion = new Funcion(tipoMetodo, nombreMetodo, param);
        funciones.add(funcion);

        //aqui irá el analisis de las variables dentro del metodo
        char caracter = variablesMetodo.charAt(0);
        if (!(caracter == '*')) {
            String[] datosDeVariables = variablesMetodo.split(",");   //variablesMetodo = int-var1,int-var2
            String datosV; //public-int-var1
            for (int i = 0; i < datosDeVariables.length; i++) {
                datosV = datosDeVariables[i];  //int-var1
                String[] datosVariable = datosV.split("-");  // datosVariable = {int,var1}
                String tipoVariable = datosVariable[0];
                String nombreVariable = datosVariable[1];
                String funcionPadre = nombreMetodo;
                String rol = "Variable";
                Variable variable = new Variable(tipoVariable, nombreVariable, funcionPadre, rol);
                this.variables.add(variable);
            }
        }
    }


    /*AQUI  IRAN  TODOS  LOS  GET'S  DE  NUESTROS  ARRAYS*/
    public ArrayList<Clase> getClases() {
        return clases;
    }

    public ArrayList<Funcion> getFunciones() {
        return funciones;
    }

    public ArrayList<Variable> getVariables() {
        return variables;
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Sintax$actions {

        private final Sintax parser;

        /**
         * Constructor
         */
        CUP$Sintax$actions(Sintax parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
                int CUP$Sintax$act_num,
                java_cup.runtime.lr_parser CUP$Sintax$parser,
                java.util.Stack CUP$Sintax$stack,
                int CUP$Sintax$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Sintax$result;

            /* select the action based on the action number */
            switch (CUP$Sintax$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= S2 EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String start_val = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    RESULT = start_val;
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Sintax$parser.done_parsing();
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // S2 ::= C2 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S2", 1, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // C2 ::= I2 V CLASE IDENTIFICADOR LLAVES_A E2 LLAVES_C 
                {
                    String RESULT = null;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int variablesleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int variablesright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String variables = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    crearClase(nombre, variables);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C2", 15, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // C2 ::= I2 V CLASE IDENTIFICADOR LLAVES_A LLAVES_C 
                {
                    String RESULT = null;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    crearClase(nombre, "*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C2", 15, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // C2 ::= V CLASE IDENTIFICADOR LLAVES_A LLAVES_C 
                {
                    String RESULT = null;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    crearClase(nombre, "*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C2", 15, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // C2 ::= V CLASE IDENTIFICADOR LLAVES_A E2 LLAVES_C 
                {
                    String RESULT = null;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int variablesleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int variablesright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String variables = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    crearClase(nombre, variables);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C2", 15, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // E2 ::= S13 
                {
                    String RESULT = null;
                    int sleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(s);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E2", 16, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // E2 ::= S13 E2 
                {
                    String RESULT = null;
                    int sleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(s + "," + e);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E2", 16, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // I2 ::= S1 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I2", 17, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // I2 ::= S1 I2 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I2", 17, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // S1 ::= IMPORT I1 P_COMA 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S1", 0, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // I1 ::= IDENTIFICADOR 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I1", 14, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // I1 ::= IDENTIFICADOR PUNTO I1 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I1", 14, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // S3 ::= M 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S3", 2, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // M ::= V T3 IDENTIFICADOR PARENTESIS_A P3 PARENTESIS_C LLAVES_A E3 LLAVES_C 
                {
                    String RESULT = null;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).value;
                    int parametrosleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).left;
                    int parametrosright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).right;
                    String parametros = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).value;
                    int variablesleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int variablesright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String variables = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    crearMetodo(tipo, nombre, parametros, variables);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M", 18, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 8)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // M ::= V T3 IDENTIFICADOR PARENTESIS_A P3 PARENTESIS_C LLAVES_A E3 RETURN P P_COMA LLAVES_C 
                {
                    String RESULT = null;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 10)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 10)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 10)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)).value;
                    int parametrosleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)).left;
                    int parametrosright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)).right;
                    String parametros = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)).value;
                    int variablesleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).left;
                    int variablesright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).right;
                    String variables = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).value;
                    crearMetodo(tipo, nombre, parametros, variables);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M", 18, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 11)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // M ::= V T3 IDENTIFICADOR PARENTESIS_A PARENTESIS_C LLAVES_A E3 LLAVES_C 
                {
                    String RESULT = null;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).value;
                    int variablesleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int variablesright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String variables = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    crearMetodo(tipo, nombre, "*", variables);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M", 18, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // M ::= V T3 IDENTIFICADOR PARENTESIS_A PARENTESIS_C LLAVES_A E3 RETURN P P_COMA LLAVES_C 
                {
                    String RESULT = null;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 8)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 8)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 8)).value;
                    int variablesleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).left;
                    int variablesright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).right;
                    String variables = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).value;
                    crearMetodo(tipo, nombre, "*", variables);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M", 18, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 10)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // M ::= V T3 IDENTIFICADOR PARENTESIS_A P3 PARENTESIS_C LLAVES_A LLAVES_C 
                {
                    String RESULT = null;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).value;
                    int parametrosleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int parametrosright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String parametros = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    crearMetodo(tipo, nombre, parametros, "*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M", 18, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // M ::= V T3 IDENTIFICADOR PARENTESIS_A P3 PARENTESIS_C LLAVES_A RETURN P P_COMA LLAVES_C 
                {
                    String RESULT = null;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 8)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 8)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 8)).value;
                    int parametrosleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).left;
                    int parametrosright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).right;
                    String parametros = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)).value;
                    crearMetodo(tipo, nombre, parametros, "*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M", 18, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 10)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // M ::= V T3 IDENTIFICADOR PARENTESIS_A PARENTESIS_C LLAVES_A LLAVES_C 
                {
                    String RESULT = null;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).value;
                    crearMetodo(tipo, nombre, "*", "*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M", 18, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // M ::= V T3 IDENTIFICADOR PARENTESIS_A PARENTESIS_C LLAVES_A RETURN P P_COMA LLAVES_C 
                {
                    String RESULT = null;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 8)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 8)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 8)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)).value;
                    crearMetodo(tipo, nombre, "*", "*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M", 18, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // E3 ::= S13 
                {
                    String RESULT = null;
                    int sleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(s);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E3", 20, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // E3 ::= S13 E3 
                {
                    String RESULT = null;
                    int sleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(s + "," + e);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E3", 20, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // P3 ::= T3 IDENTIFICADOR 
                {
                    String RESULT = null;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(tipo + "-" + nombre);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P3", 21, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // P3 ::= T3 IDENTIFICADOR COMA P3 
                {
                    String RESULT = null;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int comaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int comaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String coma = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String p = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(tipo + "-" + nombre + coma + p);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P3", 21, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // S4 ::= D4 
                {
                    String RESULT = null;
                    int dleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int dright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String d = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(d);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S4", 3, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // D4 ::= V T3 I4 P_COMA 
                {
                    String RESULT = null;
                    int vleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int vright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String v = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    RESULT = String.format(v + "-" + tipo + "-" + nombre);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D4", 22, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // D4 ::= T3 I4 P_COMA 
                {
                    String RESULT = null;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    RESULT = String.format("public" + "-" + tipo + "-" + nombre);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D4", 22, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // S5 ::= A5 
                {
                    String RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(a);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S5", 4, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // A5 ::= V T3 I4 IGUAL P P_COMA 
                {
                    String RESULT = null;
                    int vleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).left;
                    int vright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).right;
                    String v = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)).value;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    RESULT = String.format(v + "-" + tipo + "-" + nombre);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A5", 24, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // A5 ::= T3 I4 IGUAL P P_COMA 
                {
                    String RESULT = null;
                    int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).left;
                    int tiporight = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).right;
                    String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)).value;
                    int nombreleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int nombreright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String nombre = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    RESULT = String.format("public" + "-" + tipo + "-" + nombre);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A5", 24, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // S6 ::= V IDENTIFICADOR PARENTESIS_A I6 PARENTESIS_C LLAVES_A D6 LLAVES_C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S6", 5, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // S6 ::= V IDENTIFICADOR PARENTESIS_A PARENTESIS_C LLAVES_A D6 LLAVES_C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S6", 5, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // S6 ::= V IDENTIFICADOR PARENTESIS_A PARENTESIS_C LLAVES_A LLAVES_C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S6", 5, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // D6 ::= S13 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D6", 27, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // D6 ::= S13 D6 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D6", 27, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // I6 ::= T3 IDENTIFICADOR 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I6", 28, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // I6 ::= T3 IDENTIFICADOR COMA I6 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I6", 28, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // S7 ::= F 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S7", 6, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // F ::= IDENTIFICADOR PARENTESIS_A I4 PARENTESIS_C P_COMA 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F", 29, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // F ::= IDENTIFICADOR PARENTESIS_A PARENTESIS_C P_COMA 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F", 29, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // S8 ::= F8 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S8", 7, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // F8 ::= IF PARENTESIS_A C8 PARENTESIS_C LLAVES_A E8 LLAVES_C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F8", 32, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // F8 ::= IF PARENTESIS_A C8 PARENTESIS_C LLAVES_A E8 RETURN P P_COMA LLAVES_C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F8", 32, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // F8 ::= IF PARENTESIS_A C8 PARENTESIS_C LLAVES_A RETURN P P_COMA LLAVES_C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F8", 32, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 8)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // F8 ::= IF PARENTESIS_A C8 PARENTESIS_C LLAVES_A E8 LLAVES_C J8 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F8", 32, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // F8 ::= IF PARENTESIS_A C8 PARENTESIS_C LLAVES_A E8 RETURN P P_COMA LLAVES_C J8 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F8", 32, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 10)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // F8 ::= IF PARENTESIS_A C8 PARENTESIS_C LLAVES_A RETURN P P_COMA LLAVES_C J8 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F8", 32, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 9)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // C8 ::= S16 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C8", 30, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // E8 ::= S13 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E8", 31, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // E8 ::= S13 E8 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E8", 31, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // J8 ::= ELSE LLAVES_A E8 LLAVES_C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("J8", 33, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // J8 ::= ELSE LLAVES_A E8 RETURN P P_COMA LLAVES_C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("J8", 33, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // S9 ::= F9 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S9", 8, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // F9 ::= FOR PARENTESIS_A A9 C9 I9 PARENTESIS_C LLAVES_A X9 LLAVES_C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F9", 34, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 8)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // A9 ::= INT IDENTIFICADOR IGUAL E9 P_COMA 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A9", 35, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // E9 ::= EXPRESION 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E9", 36, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // C9 ::= IDENTIFICADOR MENOR E9 P_COMA 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C9", 37, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // I9 ::= IDENTIFICADOR MAS MAS 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I9", 38, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // X9 ::= S13 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("X9", 39, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // X9 ::= S13 X9 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("X9", 39, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // S10 ::= W 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S10", 9, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // W ::= WHILE PARENTESIS_A C10 LLAVES_A E10 LLAVES_C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("W", 40, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // C10 ::= S16 PARENTESIS_C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C10", 41, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // E10 ::= S13 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E10", 42, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // E10 ::= S13 E10 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E10", 42, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // S11 ::= D 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S11", 10, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // D ::= DO LLAVES_A E11 LLAVES_C W11 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D", 43, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // W11 ::= WHILE PARENTESIS_A C11 PARENTESIS_C P_COMA 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("W11", 44, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // C11 ::= S16 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C11", 47, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // E11 ::= S13 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E11", 45, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // E11 ::= S13 E11 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E11", 45, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // S12 ::= W12 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S12", 11, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // W12 ::= SWITCH PARENTESIS_A C12 LLAVES_A K12 LLAVES_C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("W12", 46, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // C12 ::= IDENTIFICADOR PARENTESIS_C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C12", 48, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // K12 ::= K 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("K12", 49, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // K12 ::= K K12 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("K12", 49, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // K ::= CASE NUMERO DOS_PUNTOS E12 BREAK P_COMA 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("K", 50, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // K ::= CASE CADENA DOS_PUNTOS E12 BREAK P_COMA 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("K", 50, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // E12 ::= S13 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E12", 51, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // E12 ::= S13 E12 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E12", 51, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // S13 ::= P13 
                {
                    String RESULT = null;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String p = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(p);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S13", 12, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // P13 ::= S3 
                {
                    String RESULT = null;
                    RESULT = String.format("*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P13", 52, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // P13 ::= S4 
                {
                    String RESULT = null;
                    int s4left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s4right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s4 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(s4);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P13", 52, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // P13 ::= S5 
                {
                    String RESULT = null;
                    int s5left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s5right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s5 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(s5);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P13", 52, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // P13 ::= S6 
                {
                    String RESULT = null;
                    RESULT = String.format("*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P13", 52, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 87: // P13 ::= S7 
                {
                    String RESULT = null;
                    RESULT = String.format("*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P13", 52, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 88: // P13 ::= S8 
                {
                    String RESULT = null;
                    RESULT = String.format("*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P13", 52, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 89: // P13 ::= S9 
                {
                    String RESULT = null;
                    RESULT = String.format("*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P13", 52, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 90: // P13 ::= S10 
                {
                    String RESULT = null;
                    RESULT = String.format("*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P13", 52, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 91: // P13 ::= S11 
                {
                    String RESULT = null;
                    RESULT = String.format("*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P13", 52, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 92: // P13 ::= S12 
                {
                    String RESULT = null;
                    RESULT = String.format("*");
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P13", 52, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 93: // S16 ::= C 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S16", 13, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 94: // C ::= IDENTIFICADOR IGUAL IGUAL IDENTIFICADOR 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 95: // C ::= IDENTIFICADOR IGUAL IGUAL CADENA 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 96: // C ::= IDENTIFICADOR NEGACION IGUAL IDENTIFICADOR 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 97: // C ::= IDENTIFICADOR NEGACION IGUAL CADENA 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 98: // C ::= NUMERO IGUAL IGUAL NUMERO 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 99: // C ::= DECIMAL IGUAL IGUAL DECIMAL 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 100: // C ::= NUMERO NEGACION IGUAL NUMERO 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 101: // C ::= DECIMAL NEGACION IGUAL DECIMAL 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 102: // C ::= IDENTIFICADOR MENOR IGUAL NUMERO 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 103: // C ::= IDENTIFICADOR MAYOR IGUAL NUMERO 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 104: // C ::= IDENTIFICADOR IGUAL IGUAL NUMERO 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 105: // C ::= IDENTIFICADOR NEGACION IGUAL NUMERO 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 106: // C ::= IDENTIFICADOR MAYOR NUMERO 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 107: // C ::= IDENTIFICADOR MENOR NUMERO 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 108: // C ::= NUMERO MAYOR NUMERO 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 109: // C ::= NUMERO MENOR NUMERO 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 110: // C ::= DECIMAL MENOR DECIMAL 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 111: // C ::= DECIMAL MAYOR DECIMAL 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C", 53, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 112: // EXPRESION ::= S17 
                {
                    String RESULT = null;
                    int expresionleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int expresionright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String expresion = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION", 56, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 113: // S17 ::= NUMERO S18 
                {
                    String RESULT = null;
                    int numeroleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int numeroright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String numero = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int s2left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s2right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s2 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(numero + s2);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S17", 54, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 114: // S17 ::= PARENTESIS_A S17 PARENTESIS_C S2 
                {
                    String RESULT = null;
                    int paleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).left;
                    int paright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).right;
                    String pa = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)).value;
                    int s1left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int s1right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int s2left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s2right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s2 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(pa + s1 + s2);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S17", 54, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 115: // S17 ::= NUMERO 
                {
                    String RESULT = null;
                    int numleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int numright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String num = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(num);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S17", 54, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 116: // S17 ::= DECIMAL S2 
                {
                    String RESULT = null;
                    int decimalleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int decimalright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String decimal = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int s2left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s2right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s2 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(decimal + s2);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S17", 54, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 117: // S17 ::= DECIMAL 
                {
                    String RESULT = null;
                    int decimalleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int decimalright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String decimal = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(decimal);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S17", 54, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 118: // S17 ::= PARENTESIS_A S17 PARENTESIS_C 
                {
                    String RESULT = null;
                    int paleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int paright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String pa = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int s1left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int s1right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int pcleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int pcright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String pc = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(pa + s1 + pc);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S17", 54, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 119: // S18 ::= MAS S17 
                {
                    String RESULT = null;
                    int sumaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int sumaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String suma = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int s1left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s1right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(suma + s1);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S18", 55, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 120: // S18 ::= MENOS S17 
                {
                    String RESULT = null;
                    int restaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int restaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String resta = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int s1left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s1right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(resta + s1);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S18", 55, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 121: // S18 ::= DIVISION S17 
                {
                    String RESULT = null;
                    int divleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int divright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String div = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int s1left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s1right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(div + s1);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S18", 55, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 122: // S18 ::= MULTIPLICACION S17 
                {
                    String RESULT = null;
                    int multleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int multright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String mult = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int s1left = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int s1right = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String s1 = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(mult + s1);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S18", 55, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 123: // T3 ::= VOID 
                {
                    String RESULT = null;
                    int vleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int vright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String v = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(v);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T3", 19, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 124: // T3 ::= INT 
                {
                    String RESULT = null;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String i = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(i);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T3", 19, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 125: // T3 ::= STRING 
                {
                    String RESULT = null;
                    int strleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int strright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String str = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(str);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T3", 19, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 126: // T3 ::= BOOLEAN 
                {
                    String RESULT = null;
                    int boolleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int boolright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String bool = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(bool);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T3", 19, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 127: // T3 ::= CHAR 
                {
                    String RESULT = null;
                    int chleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int chright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String ch = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(ch);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T3", 19, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 128: // T3 ::= DOUBLE 
                {
                    String RESULT = null;
                    int dbleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int dbright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String db = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(db);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T3", 19, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 129: // T3 ::= IDENTIFICADOR 
                {
                    String RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(id);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T3", 19, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 130: // V ::= PUBLIC 
                {
                    String RESULT = null;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String p = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(p);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("V", 57, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 131: // V ::= PRIVATE 
                {
                    String RESULT = null;
                    int prleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int prright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String pr = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(pr);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("V", 57, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 132: // V ::= PROTECTED 
                {
                    String RESULT = null;
                    int proleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int proright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String pro = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(pro);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("V", 57, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 133: // V ::= FINAL 
                {
                    String RESULT = null;
                    int finleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int finright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String fin = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(fin);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("V", 57, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 134: // I4 ::= IDENTIFICADOR 
                {
                    String RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(id);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I4", 23, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 135: // I4 ::= IDENTIFICADOR COMA I4 
                {
                    String RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)).value;
                    int comaleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int comaright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    String coma = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).right;
                    String i = (String) ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                    RESULT = String.format(id + coma + i);
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I4", 23, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 136: // P ::= IDENTIFICADOR 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P", 58, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 137: // P ::= EXPRESION 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P", 58, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 138: // P ::= CADENA 
                {
                    String RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P", 58, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Sintax$act_num + "found in internal parse table");

            }
        }

        /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Sintax$do_action(
                int CUP$Sintax$act_num,
                java_cup.runtime.lr_parser CUP$Sintax$parser,
                java.util.Stack CUP$Sintax$stack,
                int CUP$Sintax$top)
                throws java.lang.Exception {
            return CUP$Sintax$do_action_part00000000(
                    CUP$Sintax$act_num,
                    CUP$Sintax$parser,
                    CUP$Sintax$stack,
                    CUP$Sintax$top);
        }
    }

}
