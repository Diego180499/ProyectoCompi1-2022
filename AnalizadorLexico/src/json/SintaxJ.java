
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package json;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxJ extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxJ() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxJ(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxJ(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\005\000\002\004\005\000\002\005\005" +
    "\000\002\005\007\000\002\007\005\000\002\010\011\000" +
    "\002\010\013\000\002\025\005\000\002\013\005\000\002" +
    "\014\005\000\002\014\007\000\002\015\007\000\002\020" +
    "\005\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\024\005\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\004\010\004\001\002\000\010\004\007\005" +
    "\012\006\013\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\015\uffed\001\002\000\006\011" +
    "\uffff\014\103\001\002\000\004\010\024\001\002\000\004" +
    "\015\uffec\001\002\000\004\015\uffeb\001\002\000\006\011" +
    "\uffef\014\uffef\001\002\000\004\015\022\001\002\000\006" +
    "\011\ufff0\014\ufff0\001\002\000\006\011\ufff1\014\ufff1\001" +
    "\002\000\004\011\021\001\002\000\004\002\000\001\002" +
    "\000\004\012\023\001\002\000\004\010\uffee\001\002\000" +
    "\004\007\034\001\002\000\004\013\032\001\002\000\004" +
    "\013\031\001\002\000\004\013\030\001\002\000\006\011" +
    "\ufff6\014\ufff6\001\002\000\006\011\ufffd\014\ufffd\001\002" +
    "\000\006\011\ufffa\014\ufffa\001\002\000\004\011\073\001" +
    "\002\000\004\015\071\001\002\000\006\011\036\014\037" +
    "\001\002\000\006\013\ufffc\014\065\001\002\000\004\022" +
    "\041\001\002\000\004\014\044\001\002\000\004\015\042" +
    "\001\002\000\004\026\043\001\002\000\004\014\uffe9\001" +
    "\002\000\006\024\047\025\045\001\002\000\004\015\063" +
    "\001\002\000\004\011\ufff3\001\002\000\004\015\061\001" +
    "\002\000\004\011\051\001\002\000\006\013\ufff9\014\052" +
    "\001\002\000\004\010\053\001\002\000\004\007\034\001" +
    "\002\000\004\013\ufff8\001\002\000\004\014\056\001\002" +
    "\000\004\022\041\001\002\000\004\014\060\001\002\000" +
    "\004\025\045\001\002\000\004\026\062\001\002\000\004" +
    "\011\ufff2\001\002\000\004\026\064\001\002\000\004\011" +
    "\ufff7\001\002\000\004\010\066\001\002\000\004\007\034" +
    "\001\002\000\004\013\ufffb\001\002\000\004\011\036\001" +
    "\002\000\004\026\072\001\002\000\006\011\uffea\014\uffea" +
    "\001\002\000\006\013\ufff5\014\074\001\002\000\004\010" +
    "\075\001\002\000\004\007\034\001\002\000\004\013\ufff4" +
    "\001\002\000\004\014\100\001\002\000\004\022\041\001" +
    "\002\000\004\014\102\001\002\000\004\024\047\001\002" +
    "\000\010\004\007\005\012\006\013\001\002\000\004\011" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\004\002\004\001\001\000\020\003\017\004" +
    "\016\007\015\013\013\021\007\022\010\023\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\025\010\024\014\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\032\024\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\045\025\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\053\001" +
    "\001\000\004\024\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\056\001\001\000\002\001\001\000" +
    "\004\025\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\066\001" +
    "\001\000\004\024\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\075\001\001\000\006\015\032\024\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\100\001\001\000\002\001\001\000\004\020\045\001\001" +
    "\000\020\003\103\004\016\007\015\013\013\021\007\022" +
    "\010\023\014\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxJ$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxJ$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxJ$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private Symbol s;
    

    public Symbol getS(){
        return this.s;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxJ$actions {
  private final SintaxJ parser;

  /** Constructor */
  CUP$SintaxJ$actions(SintaxJ parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxJ$do_action_part00000000(
    int                        CUP$SintaxJ$act_num,
    java_cup.runtime.lr_parser CUP$SintaxJ$parser,
    java.util.Stack            CUP$SintaxJ$stack,
    int                        CUP$SintaxJ$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxJ$result;

      /* select the action based on the action number */
      switch (CUP$SintaxJ$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-1)).value;
		RESULT = start_val;
              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxJ$parser.done_parsing();
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S1 ::= LLAVES_A S2 LLAVES_C 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("S1",0, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S2 ::= R2 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("S2",1, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S2 ::= R2 COMA S2 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("S2",1, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S3 ::= R1 D3 CORCHETE_C 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("S3",2, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D3 ::= LLAVES_A N LLAVES_C 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("D3",3, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // D3 ::= LLAVES_A N LLAVES_C COMA D3 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("D3",3, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S4 ::= R1 D4 CORCHETE_C 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("S4",5, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // D4 ::= LLAVES_A N COMA T COMA F4 LLAVES_C 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("D4",6, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // D4 ::= LLAVES_A N COMA T COMA F4 LLAVES_C COMA D4 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("D4",6, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // F4 ::= FUNCION DOS_PUNTOS CADENA 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("F4",19, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S7 ::= R1 M7 CORCHETE_C 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("S7",9, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // M7 ::= LLAVES_A D7 LLAVES_C 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("M7",10, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // M7 ::= LLAVES_A D7 LLAVES_C COMA M7 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("M7",10, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // D7 ::= N COMA T COMA P7 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("D7",11, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // P7 ::= PARAMETROS DOS_PUNTOS CADENA 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("P7",14, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // R2 ::= S3 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("R2",15, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // R2 ::= S4 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("R2",15, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // R2 ::= S7 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("R2",15, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // R1 ::= N1 DOS_PUNTOS CORCHETE_A 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("R1",16, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // N1 ::= CLASES 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("N1",17, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // N1 ::= VARIABLES 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("N1",17, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // N1 ::= METODOS 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("N1",17, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // N ::= NOMBRE DOS_PUNTOS CADENA 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("N",18, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // T ::= TIPO DOS_PUNTOS CADENA 
            {
              String RESULT =null;

              CUP$SintaxJ$result = parser.getSymbolFactory().newSymbol("T",20, ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.elementAt(CUP$SintaxJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJ$stack.peek()), RESULT);
            }
          return CUP$SintaxJ$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxJ$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxJ$do_action(
    int                        CUP$SintaxJ$act_num,
    java_cup.runtime.lr_parser CUP$SintaxJ$parser,
    java.util.Stack            CUP$SintaxJ$stack,
    int                        CUP$SintaxJ$top)
    throws java.lang.Exception
    {
              return CUP$SintaxJ$do_action_part00000000(
                               CUP$SintaxJ$act_num,
                               CUP$SintaxJ$parser,
                               CUP$SintaxJ$stack,
                               CUP$SintaxJ$top);
    }
}

}
